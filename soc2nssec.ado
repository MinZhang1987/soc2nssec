*! version 1.1 14Sepg2019 Min Zhang Stata 13
program define soc2nssec
	version 10.0
	syntax varlist(max=1)[if], GENerate(name) [FLOAT] Version(str) [noLabel]

		
	* confirm if newvar is taken
	confirm new var `generate' 
	
	* numeric
	capture confirm numeric variable `varlist'
	if _rc==7 {
		di "`varlist' is not a numeric variable and cannot be recoded."
		error 7
	}
	*
	* define if
	marksample touse
	quietly count if `touse'
	if `r(N)'==0 {
		error 2000
	}
	* confirm 4-digit
	
	* recode SOC 90
	if "`version'" == "90" {
		if (`varlist'>=100 & `varlist'<=999) | (`varlist'==.) {
			qui	recode `varlist' ///
				(100 101 102=2) (103=4.1) (110=2) (111 112=5) ///
				(113 120 121 122 123 124 125 126=2) (127 130=7.1) ///
				(131=5) (132=4.1) (139 140=5) (141=12.6) (142=5) ///
				(150 151 152 153 154 155=2) (160 169=9.2)  ///
				(170=5) (171=8.1) (172 173=9.1) (174 175 176 177=5) ///
				(178=8.1) (179=5) (190=4.1) (191=3.1) (199=5) ///
				(200 201 202 209 210 211 212 213 214 215 216=3.1) ///
				(217 218=4.1) (219 220 221=3.1) (222=4) (223=3.3) (224 230=3.1) ///
				(231=4.1) (232=3.1) (233 234 235=4.1) (239=9.1) (240=3.1) ///
				(241=3.3) (242 250=3.1) (251=3.2) (252=3.1) (253=3.2) ///
				(260 261 262=3.1) (270 271=4.1) (290 291 292=3.1) (293 300 301=4.1) ///
				(302=7.3) (303 304 309=4.1) (310=7.3) (311 312 313=4.1) ///
				(320=3.2) (330=4.1) (331=3.2) (332 340 341 342 343 344=4.1) (345=7.3) ///
				(346=12.1) (347=4.1) (347=4.1) (348=3.2) (349=12.2) ///
				(350=7.1) (360 361=4.1) (362=3.2) (363=4.1) ///
				(364=3.1) (370=12.7) (371 380=4.1) (381 382=9.1) ///
				(383=7.3) (384 385=4.3) (386=7.3) (387=4.2) ///
				(390 391 392=4.2) (393=9.1) (394 395 396 399=4.1) (400 401 410 411=7.1) ///
				(412=7.2) (420 421=7.1) (430=7.2) (440=12.6) ///
				(441=13.4) (450 451 452 459=7.1) (460 461 462=12.6) (463=11.1) ///
				(490=7.1) (491=7.3) (500 501 502=9.1) (503=13.2) ///
				(504=9.1) (505=12.4) (506 507 509=9.1) (510 511 512 513=12.3) ///
				(514=10) (515 516 517 518=11.1) (519=12.3) (520 521 522=11.1) ///
				(523=7.4) (524 525=11.1) (526 529=7.4) (530=13.3) ///
				(531=12.3) (532=11.1) (533=12.3) (534=13.3) ///
				(535=12.3) (536=9.1) (537=13.3) (540 541 542 543=11.1) ///
				(544=12.4) (550 551=13.3) (552 553=13.2) (554 555=13.3) ///
				(556=9.1) (557=12.3) (559=13.3) (560 561=11.1) ///
				(562=13.3) (563 569=11.1) (570=9.1) (571=13.3) ///
				(572=12.3) (573=11.1) (579=9.1) (580=11.1) ///
				(581 582 590 591=13.3) (592=7.3) (593=9.1) (594=11.1) ///
				(595=12.5) (596=12.3) (597=13.3) (598=7.4) ///
				(599=7.4) (600 601 610 611 612=7.2) (613=4.1) (614 615=12.2) ///
				(619=13.1) (620=12.2) (621 622 630=13.1) (631=11.2) ///
				(640 641=7.3) (642=7.2) (643 644=12.2) (650=7.2) ///
				(651 652=12.7) (659 660=13.1) (661=9.1) (670=12.2) ///
				(671=10) (672=12.2) (673=13.2) (690=12.2) ///
				(691=5) (699=12.2) (700=4.1) (701=4.1) ///
				(702=4.2) (703=3.2) (710=4.2) (719=7.2) (720 721 722=12.1) ///
				(730=9.1) (731=13.3) (732 733=9.1) (790=7.2) ///
				(791=13.1) (792=12.1) (800 801 802 809=12.4) (810=11.2) ///
				(811 812 813 814=13.2) (820=11.2) (821 822 823 824=12.3) (825=12.4) ///
				(826=11.2) (829 830 831 832 833 834 839=12.3) ///
				(840 841 842 843 844 850 851=12.4) (859=13.2) ///
				(860 861=11.2) (862 863=13.2) (864=7.3) (869=11.2) ///
				(870 871=10) (872 873=13.3) (874=9.1) (875=13.3) ///
				(880=12.4) (881 882 883 884=11.2) (885=13.3) (886 887=12.3) ///
				(889=13.4) (890=11.2) (891=12.3) (892=11.2) ///
				(893 894=12.4) (895=13.4) (896=10) (897=12.3) ///
				(898=11.2) (899=12.4) (900 901=12.5) (902=13.5) ///
				(903=9.1) (904=9.2) (910=13.3) (911 912 913 919 920=13.4) ///
				(921=9.1) (922=11.2) (923=10) (924=9.1) ///
				(929 930 931 932 933 934=13.4) (940 941 950=12.2) (951=13.1) ///
				(952 953=12.2) (954=12.1) (955=13.4) (956=9.1) ///
				(957 958 959 990=13.4) (999=13.1) if `touse', gen(`generate')
	
	
			qui recode `generate' ///
			   (1=1) ///
			   (2=1) ///
			   (3.0/3.9=3) ///
			   (4.0/4.9=4) ///
			   (5=5) ///
			   (6=6) ///
			   (7.0/7.9=7) ///
			   (8.0/8.9=8) ///
			   (9.0/9.9=9) ///
			   (10=10) ///
			   (11.0/11.9=11) ///
			   (12.0/12.9=12) ///
			   (13.0/13.9=13) ///
			   (14.0/14.9=14) if `touse'
			   
			qui recode `generate' ///
			     (1/3=1) ///
				 (4/6=2) ///
				 (7=3) ///
				 (8/9=4) ///
				 (10/11=5) ///
				 (12=6) ///
				 (13=7) if `touse'
			di "Seems this was a success"	
		
				* label values 
			   if "`label'"!="nolabel" {
					capture label define  `generate'_nssec7 ///
						1 "Higher Managerial and Professional" ///
						2 "Lower Managerial and Professional" ///
						3 "Intermediate" ///
						4 "Small Employer and Own Account Workers" ///
						5 "Lower Supervisory and Technical" ///
						6 "Semi-Routine" ///
						7 "Routine"
					capture label val `generate'  `generate'_nssec7	
			   			   
	}
	}	
	
		else {
			di "`varlist' is not a 3-digit SOC1990"
		}
		}
	* recode SOC 00
	else if "`version'" == "00" {
			if (`varlist'>=1000 & `varlist'<=9999) | (`varlist'==.) {
					qui recode `varlist' ///
						(1111 1112 1113=2) (1114=5) (1121=2) (1122=5) ///
						(1123 1131 1132 1133 1134 1135 1136 1137=2) ///
						(1141 1142 1151 1152 1161 1162 1163=5) (1171 1172 1173=2) ///
						(1174=5) (1181=2) (1182 1183=3) (1184=2) ///
						(1185 1211 1212 1219 1211=5) (1212=2) (1219=9.2) (1221=9.1) ///
						(1222=5) (1223=8.1) (1224 1225 1226=5) (1231=2) ///
						(1232 1233 1234=8.1) (1235 1239=5) ///
						(2111 2112 2113 2121 2122 2123 2124 2125 2126=3.1) ///
						(2127 2128=4.1) (2129=3.1) (2131 2132=3.2) ///
						(2211 2212 2213=3.1) (2214=4.1) (2215=3.3) ///
						(2216 2311=3.1) (2312=4.1) (2313=3.1) ///
						(2314 2315 2316=4.1) (2317=3.1) (2319=9.1) ///
						(2321 2322 2329 2411 2419 2421=3.1) (2422=3.2) (2423 2431 2432=3.1) ///
						(2433=4.1) (2434=3.1) (2441 2442=4.1) (2443=3.2) ///
						(2444=3.1) (2451 2452 3111=4.1) (3112=7.3)  ///
						(3113 3114=4.1) (3115=11.1) (3119 3121=4.1) ///
						(3122=7.3) (3123 3131 3132 3211 3212=4.1) (3213=6) (3214 3215=4.1) ///
						(3216=7.3) (3217=12.1) (3218=7.3) (3221 3222=4.1) ///
						(3223=3.2) (3229=4.3) (3231 3232=4.1) (3311 3312 3313 3314=7.2) ///
						(3319=4.1) (3411 3412 3413 3414 3415 3416=4.3) (3421=7.3) (3422=9.1) ///
						(3431 3432 3433=4.1) (3434=7.2) (3441 3442=4.1) ///
						(3443=12.2) (3449=7.2) (3511=4.1) (3512=3.2) (3513=4.1) ///
						(3514=11.1) (3520=7.1) (3531=4.1) (3532 3533=3.2) ///
						(3534=4.1) (3535=3.2) (3536 3537=4.2) ///
						(3539 3541=4.1) (3542=4.2) (3543 3544=4.1) ///
						(3551=3.1) (3552=7.2) (3561 3562 3563 3564 3565 3566 3567=4.1) ///
						(3568=3.2) (4111=4.1) (4112 4113=7.1) ///
						(4114=4.1) (4121 4122 4123 4131 4132=7.1) (4133=12.6) ///
						(4134 4135 4136=7.1) (4137 4141=12.6) (4142=11.1) ///
						(4150=7.2) (4211 4212 4213 4214 4215=7.1) (4216=12.6) ///
						(4217=7.1) (5111=9.2) (5112=12.5) ///
						(5113=11.1) (5119=9.2) (5211=13.3) ///
						(5212 5213=12.3) (5214 5215 5216=13.3) (5221=12.3) ///
						(5222 5223 5224 5231 5232 5233=11.1) (5234=12.3) (5241=11.1) ///
						(5242=7.4) (5243 5244=11.1) (5245 5249=7.4) ///
						(5311=12.3) (5312 5313=9.1) (5314=11.1) ///
						(5315 5316 5319 5321 5322 5323=9.1) (5411/5413=13.3) (5414=12.3) ///
						(5419=13.3) (5421 5422=11.1) (5423=13.3) ///
						(5423=13.3) (5424=11.1) (5431=13.3) ///
						(5432=11.1) (5433=13.3) (5434=12.2) ///
						(5491 5492=13.3) (5493=11.1) (5494=9.1) ///
						(5495=11.1) (5496=13.1) (5499=11.1) (6111=7.3) ///
						(6112=7.2) (6113=12.2) (6114=12.7) ///
						(6115=12.2) (6121=7.2) (6122=9.1) ///
						(6123 6124=12.7) (6131=12.2) (6139=13.5) ///
						(6211=12.2) (6212=7.2) (6213=13.1) ///
						(6214 6215=7.2) (6219=13.3) (6221=13.1) ///
						(6222=9.2) (6231 6232 6291 6292=12.2) (7111 7112 7113 7121=12.1) ///
						(7122=7.2) (7123=13.3) (7124=9.1) ///
						(7125 7129 7211 7212=7.2) (8111=12.4) (8112=12.3) ///
						(8113=13.2) (8114=11.2) (8115=12.3) ///
						(8116=12.4) (8117 8118=12.3) (8119=12.4) ///
						(8121=12.3) (8122=13.3) (8123=11.2) ///
						(8124 8125=12.4) (8126=11.2) (8129 8131 8132=12.4) ///
						(8133=11.2) (8134=13.2) (8134=12.4) (8135=12.4) ///
						(8136=12.3) (8137=13.2) (8138=7.3) ///
						(8139=13.2) (8141=12.4) (8142=10) ///
						(8143=11.2) (8149=10) (8211 8212 8213=13.3) ///
						(8214 8215=9.1) (8216=11.2) (8217=12.4) ///
						(8218=11.2) (8219=10) (8221 8222=12.3) ///
						(8223=12.5) (8229=13.3) (9111=12.5) ///
						(9112=9.2) (9119=13.5) (9121 9129 9131 9132=13.4) ///
						(9133=12.3) (9134=13.2) (9139 9141 9149=13.4) ///
						(9211=12.2) (9219=12.6) (9221=12.2) ///
						(9222=13.1) (9223=12.2) (9224 9225 9226 9229=13.1) ///
						(9231=9.1) (9232 9233=13.4) (9234=13.2) ///
						(9235 9239=13.4) (9241 9242=12.2) (9243 9244=13.1) ///
						(9245=13.4) (9249=12.2) (9251 9259=12.1) ///
						if `touse', gen(`generate') 
				
					qui recode `generate' ///
						(1=1) ///
						(2=1) ///
						(3.0/3.9=3) ///
						(4.0/4.9=4) ///
						(5=5) ///
						(6=6) ///
						(7.0/7.9=7) ///
						(8.0/8.9=8) ///
						(9.0/9.9=9) ///
						(10=10) ///
						(11.0/11.9=11) ///
						(12.0/12.9=12) ///
						(13.0/13.9=13) ///
						(14.0/14.9=14) if `touse'
			   
					qui recode `generate' ///
						(1/3=1) ///
						(4/6=2) ///
						(7=3) ///
						(8/9=4) ///
						(10/11=5) ///
						(12=6) ///
						(13=7) if `touse'
					di "Seems this was a success"
 
				* label values 
				if "`label'"!="nolabel" {
					capture label define  `generate'_nssec7 ///
							1 "Higher Managerial and Professional" ///
							2 "Lower Managerial and Professional" ///
							3 "Intermediate" ///
							4 "Small Employer and Own Account Workers" ///
							5 "Lower Supervisory and Technical" ///
							6 "Semi-Routine" ///
							7 "Routine"
					capture label val `generate'  `generate'_nssec7			
	}				
	}
	
		else {
			di "`varlist' is not a 4-digit SOC2000"
		}
		}
	* recode SOC 10
	else if "`version'" == "10" {
			if (`varlist'>=1000 & `varlist'<=9999) | (`varlist'==.) {
				qui recode `varlist' ///
				(1115 1116 1121 = 2) (1122 =5 ) ///
					(1123 1131 1132 1133 1134 1135 = 2 )  ///
					(1136 1139 1150 1161 1162 = 5) ///
					(1171 1172 1173 1181 1184 = 2) (1190 = 5) 				///
					(1211 1213 = 9.2) (1221 = 9.1) (1223 1224 = 8.1) 			///
					(1225 1226 1241 1424 = 5) (1251 = 2) (1252 1253 1254 = 8.1) 		///
					(1255 1259 = 5) 							///
					(2111 2112 2113 2114 2119 2121 2122 2123 2124 2126 = 3.1) 		///
					(2127 = 4.1) (2129 = 3.1) (2133 2134 2135 2136 = 3.2 ) 			///
					(2137 2139 = 4.2) (2141 = 4.1) (2142 2150 2211 2212 2213 = 3.1) 	///
					(2214 = 4.3) (2215 = 3.3) (2216 = 3.1) (2217 = 4.1) (2218 = 4.3) 	///
					(2219 2221 2222 = 4.1) (2223 = 3.2) (2229 = 4.3) (2231 2232 = 4.1)	 ///
					(2311 = 3.1) (2312 2314 2315 2316 = 4.1) (2317 2318 = 3.1)		 ///
					(2319 = 7.3) (2412 = 3.3) (2413 2419 2421 2423 = 3.1)			 ///
					(2424 = 3.2) (2425 2426 = 3.1) (2429 = 4.1) (2431 = 3.3) (2432 = 3.1)	 ///
					(2433 = 4.1) (2434 = 3.1) (2435 = 4.1) (2436 = 4.2) (2442 = 4.1) 	///
					(2443 = 3.2) (2444 = 3.1) (2449 2451 2452 2461 = 4.1)			 ///
					(2462 = 4.2) (2463 = 3.2) (2471 = 4.3) (2472 = 4.1) 			///
					(2473 = 4.2) (3111 = 4.1) (3112 = 7.3) (3113 3114 = 4.1)		 ///
					(3115 = 11.1) (3116 3119 3121 = 4.1) (3115 = 11.1) 			///
					(3116 3119 3121 = 4.1) (3122 = 7.3) (3131 3132 = 4.1) 			///
					(3213 = 7.2) (3216 3217 3218 = 7.3) (3219 = 4.3) 			///
					(3231 3233 3234 3235 3239 = 4.1) (3311 3312 3313 3314 = 7.2)		 ///
					(3315 = 12.2) (3319 = 4.1) (3411 3412 3413 3414 3415 3416 = 4.3) 	///
					(3417 = 9.1) (3421 = 7.3) (3422 = 9.1) (3441 3442 = 4.1) (3443 = 12.2) 	///
					(3511 = 4.1) (3512 = 3.2) (3513 = 4.1) (3520 = 7.1) (3531 = 4.1) 	///
					(3520 = 7.1) (3531 = 4.1) (3532 3533 = 3.2) (3513 = 4.1) (3520 = 7.1) 	///
					(3531 = 4.1) (3532 3533 = 3.2) (3534 = 4.1) (3535 = 3.2)  		///
					(3536 = 4.4) (3537 3538 = 4.2) (3539 3541 = 4.1) (3542 = 4.2 ) 		///
					(3543 3544 = 4.1) (3545 = 3.2) (3546 = 4.1) (3550 = 7.2)		 ///
					(3561 3562 3563 3564 3565 3567 = 4.1) (4112 4113 = 7.1)		 ///
					(4114 = 4.1) (4121 4122 4123 = 7.1) (4124 = 4.1) ///
					(4129 4131  4132 = 7.1) (4133 = 12.6) (4134 4135 4138 = 7.1)		 ///
					(4151 = 7.2) (4159 = 7.1) (4161 = 5) (4162 = 6) ///
					(4211 4212 4213 4214 4215 = 7.1) (4216 = 12.6) ///
					(4217 = 7.1) (5111 = 9.2) (5112 = 12.5) (5113 = 9.1) (5114 = 11.1) ///
					(5119 = 9.2) (5211 = 13.3) (5212 5213 = 12.3) ///
					(5214 5215 5216 = 13.3)  (5221 = 12.3) ///
					(5222 5223 5224 = 11.1) (5225 = 12.3) (5231 5232 = 11.1) ///
					(5234 = 12.3) (5235 = 11.1) (5236 = 13.3) (5237  5241 = 11.1) ///
					(5242 = 7.4) (5244 = 11.1) (5245 5249 = 7.4) (5250 = 6) ///
					(5311 = 12.3) (5312 5313 = 9.1) (5314 = 11.1) (5315 = 9.1) ///
					(5316 = 13.2) (5319 5321 5322 5323 = 9.1) (5330 = 10 ) ///
					(5411 5412 5413 = 13.3) (5414 = 12.3) (5419 = 13.3) ///
					(5421 5422 = 11.1) (5423 5431 = 13.3) (5432 = 11.1) ///
					(5433 = 13.3) (5434 = 11.1) (5435 = 12.2) (5436 = 5) ///
					(5441 5442 = 13.3) (5443 = 13.1) (5449 = 11.1) 	///
					(6121 = 7.2) (6122 = 9.1) (6123 = 12.7) (6125 = 7.2) ///
					(6126 = 12.7) (6131 6132 = 12.2) (6139 = 13.5) (6141 = 7.3) ///
					(6142 = 7.2) (6143 = 12.2) (6144 = 12.7) (6145 = 12.2) ///
					(6146 = 10) (6147 = 13.1) (6148 6211 = 12.2) ///
					(6212 6214 6215 = 7.2) (6219 = 12.2) (6221 = 13.1) ///
					(6222 6231 6232 = 12.2) (6240 = 10) (7111 7112 7113 7114 = 12.1) ///
					(7115 = 7.2) (7121 = 12.1) (7122 = 7.2) (7123 = 13.3) ///
					(7124 = 9.1) (7125 7129 = 7.2) (7130 = 6) (7211 = 7.2) ///
					(7213 = 12.6) (7214 = 11.1) (7215 7219 = 7.2) ///
					(7130 = 6) (7211 = 7.2) (7213 = 12.6) (7214 = 11.1) (7215 = 12.6) ///
					(7219 = 7.2) (7220 = 5) (8111 = 12.4) (8112 = 12.3) (8113 = 13.2) ///
					(8114 = 11.2) (8115 = 12.3) (8116 = 12.4) (8117 8118 = 12.3) ///
					(8119 = 12.4) (8121 = 12.3) (8122 = 13.3) (8123 = 11.2) ///
					(8124 8125 = 12.4) (8126 = 11.2) (8127 = 12.3) ///
					(8129 8131 8132 = 12.4) (8133 = 11.2) (8134 = 13.2) ///
					(8135 = 12.4) (8137 8139 = 13.2) (8141 8142 = 12.4) ///
					(8143 = 11.2) (8149 = 13.4) (8211 8212 8213 = 13.3) ///
					(8214 8215 = 9.1) (8221 8222 = 12.3) (8223 = 12.5) ///
					(8229 = 13.3) (8231 = 11.1) (8232 = 12.4) (8233 8234 = 11.2) ///
					(8239 = 10) (9111 9112 = 11.2) (8239 = 10) (9111 9112 = 12.5) ///
					(9119 = 13.5) (9120 9132 = 13.4) (9134 = 13.2) ///
					(9139 = 13.4) (9211 = 12.2) (9219 = 12.6) (9231 = 9.1) ///
					(9232 9233 = 13.4) (9234 = 13.2) (9235 9236  9239 = 13.4) ///
					(9241 = 12.2) (9242 = 13.4) (9244 = 13.1) (9249 = 12.2) ///
					(9251 9259 = 12.1) (9260 = 13.4) (9271 9272 = 12.2) ///
					(9273 9274 9275 9279 = 13.1)  ///
					 if `touse', gen(`generate') 

					qui recode `generate' ///
						(1=1) ///
						(2=1) ///
						(3.0/3.9=3) ///
						(4.0/4.9=4) ///
						(5=5) ///
						(6=6) ///
						(7.0/7.9=7) ///
						(8.0/8.9=8) ///
						(9.0/9.9=9) ///
						(10=10) ///
						(11.0/11.9=11) ///
						(12.0/12.9=12) ///
						(13.0/13.9=13) ///
						(14.0/14.9=14) if `touse'

					qui recode `generate' ///
						(1/3 =1) ///
						(4/6=2) ///
						(7=3) ///
						(8/9=4) ///
						(10/11=5) ///
						(12=6) ///
						(13=7) if `touse'
					

			
				di "Seems this was a success"

			* label values 
			   if "`label'"!="nolabel" {
					capture label define  `generate'_nssec7 ///
						1 "Higher Managerial and Professional" ///
						2 "Lower Managerial and Professional" ///
						3 "Intermediate" ///
						4 "Small Employer and Own Account Workers" ///
						5 "Lower Supervisory and Technical" ///
						6 "Semi-Routine" ///
						7 "Routine"
					capture label val `generate'  `generate'_nssec7	
			
	}
	}
		else  {
			di "`varlist' is not a 4-digit SOC2010"
	}
	}
	
	else {
		di "No such SOC available"
	}
	*
	 
end

 

 
